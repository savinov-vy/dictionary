@Query
Аннотация используемая для написания SQL запроса когда стандартными методами JPA выполнить запрос не получается

@Query (nativeQuery = true, value = "select id from USERS where account_id =: accountId")
Long findUserIdAccountId(@Param("accountId") Long accountId);

В данном случае accountId это переданный параметр, который учавствует в условии

nativeQuery = true означает что запрос будет на языке SQL а не HQL

проект: spring-data

    @Query(nativeQuery = true, value = "select * from Account where name = :name and bill = :bill")
    Account findAccountByNAndB(@Param("name") String name, @Param("bill") Integer bill);

======================================================================================================================

@Modifying аннотация используется при модифицирующих запросах (оперция update) в таких случаях аннотация @Param перед аргументами мето-
да не используется а в sql запрос добавляются по порядку. Метод в сервисе вызывающий метод с аннотацией @Modifying обя-
зательно должен иметь аннотацию @Transactional


пример проект: spring-data

@Modifying
@Query(nativeQuery = true, value = "update USERS u set u.firstName = ?2 where u.id = ?1")
int setNameFor(Long userId, String name);

Здесь, вместо параметра ?1 подставится userId, вместо параметра ?1 подставится name
-----------------------------------------------------------------------------------------------------------------------
    @Transactional // обязательно необходимо для вызова метода setNameFor
    @Override
    public void run(String... args) throws Exception {
        accountRepository.setNameFor(6L, "Max");
    }