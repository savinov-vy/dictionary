AOP - парадигма программирования основанная на идее разделения основного и служебного функционала. Служебный функционал
записывается в Aspect-классы.

В основе Aspect заключена сквозная логика (cross-cutting logic). Служебная логика (не бизнес - логика) является
сквозной.

К сквозному функционалу относят:
    - Логирование
    - Проверка прав доступа
    - Обработка транзакций
    - Обработка исключений
    - Кэширование и т.д.

Плюсы AOP:
    - Сквозной функционал сосредоточен в 1-м или нескольких обособленных классах. Это позволяет легче его изменять
    - Становится легче добавлять новые сквозные работы для нашего основного кода или имеющиеся сквозные работы для
      новых классов. Это достигается благодаяр конфигурации аспектов
    - Бизнес-код приложения избавляется от сквозного кода, становится меньше и чище. Работать с ним становится легче.

Минусы AOP:
    - Дополнительное время на работу аспектов
========================================================================================================================
Метод в Aspect классе называется Advice. Advice описывает что должно произойти.
    Before - выполняется до метода с основной логикой
    After returning - выполняется только после нормального окончания метода с основной логикой
    After throwning - выполняется после окончания метода с основной логикой только, если было выброшено исключение
    After/After finally - выполняется после окончания метода с основной логикой (т.е. в любом случае нормально завершится метод
                          или будет выброшено исколючение)
    Around - выполняется до и после метода с основной логикой.




