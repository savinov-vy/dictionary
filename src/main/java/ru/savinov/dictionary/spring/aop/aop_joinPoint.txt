Прописав Join Point в параметрах метода Advice, мы получаем доступ к информации о сигнатуре и праметрах
метода с бизнес-логикой.

@Before("aop.aspects.MyPointcuts.allGetMethods()")
public void methodAdvice(Join joinPoint){
MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
Object [] arguments = joinPoint.getArgs();
}
methodSignature - служит для получения информации о методе, названии метода, сигнатуре и т.п.

arguments - служит для получения информации о передаваемых аргумунтах метода

-----------------------------------------------------------------------------
пример из проекта: shop

    @After("execution(public void save(..))")
    public void afterSaveAdvice(JoinPoint joinPoint) {
        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
        System.out.println("afterSaveAdvice method: " + methodSignature.getMethod());
        System.out.println("afterSaveAdvice return type: " + methodSignature.getReturnType());
        System.out.println("afterSaveAdvice method name: " + methodSignature.getName());

        System.out.println("************************************************************");

        Object [] arguments = joinPoint.getArgs();
        for (Object obj : arguments) {
            if (obj instanceof User) {
                User user = (User) obj;
                System.out.println("User name: " + user.getUsername());
                System.out.println("User id: " + user.getId());
                System.out.println("User password: " + user.getPassword());
                System.out.println("User enabled " + user.getEnabled());
                Set<Role> roles = user.getRoles();

                for (Role role : roles) {
                    System.out.println("role name: " + role.getName());
                    System.out.println("role id: " + role.getId());

                }
            }
        }
    }

