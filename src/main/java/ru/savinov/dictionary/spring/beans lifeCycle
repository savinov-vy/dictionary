Bean - java объект, который был создан с помощью spring и находится под его управлением.

bean scope - область видимости бинов

IoC контейнер - это HashMap куда spring складывает созданные бины

Существует 5 видов бинов: singleton, prototype, request, session, global-session

singleton - хранится в IoC контейнере, может находится только в одном экземпляре. По умолчанию у бинов используется
scope singleton

prototype - не привязан к IoC контейнеру, при каждой инъекции зависимости создается новый экземляр. Или когда объект
удаляется из памяти то объект типа прототайп создается снова

request - жизненный цикл экземпляра ограничен единственным HTTP запросом; для каждого нового HTTP запроса создается
новый экземпляр бина

session - жизненный цикл экземпляра орграничен в пределах одной и той же HTTP сессии

qlobal-session - жизненный цикл экземпляра ограничен в пределах ServletContext (сейчас не используется потому что
ServletContext настраивается один при запуске приложения.)

------------------------------------------------------------------------------------------------------------------------

Жизненный цикл бина - время существования объекта в памяти

Бины по умолчанию, то есть singleton, живут в памяти на протяжении всей работы приложения, если их принудительно не уда-
ляют, что не рекомендуется делать

Prototype бины настраиваются BeanFactory (как и все остальные бины) и больше не управляются спрингом

Ссылка на prototype бины находится в объекте затребовавшем бин. И если этому объекту не нужен больше этот объект то
бин становится мусором и его удаляет Garbage Collector

------------------------------------------------------------------------------------------------------------------------

методы жизненного цикла бина

методы помеченные аннотацией @PostConstruct вызовутся при создании бина сразу после соз-
дания бина. Метод может иметь любое название, но обычно этот метод называется init

методы помеченные аннотацией @PreDestroy вызовутся при удалении бина из IoC контейнера. Oбычно
в таком методе содержатся логи осводбожения ресурсов и т.д.

Так как бины со scope prototype не хранятся в IoC контейнере то BeanFactory не может вызвать у них метод
помеченый аннотацией @PreDestroy . Поэтому у бинов типа prototype анотация предестрой не отрабатывает.

Механизм вызова @PreDestroy метода следующий:
перед закрытием приложение BeanFactory пробегается по всем бинам находящимся в IoC контейнере и вызывает у них
методы помеченные @PreDestroy. Так как бинов с скоуп прототайп нет в IoC контейнере (HashMap) то и никто
их не вызывает
------------------------------------------------------------------------------------------------------------------------
Полный цикл создания бина

После компиляции спринг создает BeanDefinition Reader для чтения конфигурации бина. Т.к. бины сконфигурированы с
помощью xml; аннотаций и java конфигурации то и BeanDefinition Reader могут быть 3 шт. (каждый умеет парсить свой тип
конфигурации). BeanDefinition Reader парсят конфигурации в BeanDefinitions (это HashMap). BeanDefinitions передается
BeanFactory и BeanFactory на основании данных BeanDefinitions (это путь к файлу и scope будующего бина)
 и скомпилированных классов (.class) создает бины. После создания бинов бин фактори передает их BeanPostProcessor ам
 для дальнейшей доработки. BeanPostProcessor имеет 2 метода postProcessBeforeInitialization и
 postProcessAfterInitialization. Между срабатываниями этих методов срабатывает метод отмеченный аннотацией
 @PostConstruct.
 После обработки бинов в BeanPostProcessor бины помещаются в IoC контейнер или внедряются в объекты в зависимости
 от указаного scope.
