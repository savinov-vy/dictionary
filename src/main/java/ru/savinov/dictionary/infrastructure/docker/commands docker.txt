================================== Основные команды докер ============================================


работа с контейнерами
-------------------------------
$ docker rm                              - удалить контейнер
$ docker container prune                 - удалить все остановленные контейнеры

$ docker ps                              - какие контейнеры запущены

$ docker ps -a                           - все существующие докер контейнеры включая остановленные

$ docker stop                            - остановить контейнер
$ docker kill

$ docker run --name my-mongo -d mongo    - запустить контейнер по имени my-mongo отвязать от текущей сессии detached

$ docker kill --signal=1 my-mongo        - убить контейнер и передать при этом сигнал (сигнал можно как то обработать в приложении)

$ docker container prune                 - удалить все остановленные контейнеры

работа с образами
-----------------------------------

$ docker image rm imageName              - удалить image
$ docker image prune                     - удалить images у которыых TAG <none>
$ docker tag nginx:latest node:latest    - создать новый image из nginx:latest новый image будет с тегом node:latest
                                         в случае если image node:latest существует то предыдущий node:latest станет node:<none>


docker rename stoic_rubin mongodb      - переименовать stoic_rubin в mongodb

docker pull nginx                 <--- скачать image образ с репозитория
полная команда docker pull <registry>/<repository>/<name>:<tag>
# docker pull 192.168.0.1:5000/myrepo/ubuntu:latest
если не указывается docker registry (хост и порт) то по умолчанию docker hub
если не указывается repository то по умолчанию docker repository


docker exec mongo bash -c 'mongo --version > mongo2.txt'


docker logs containerName > logsContainer.txt       - логи докер контейнера записать в файл

docker logs containerName | grep "id.*" -A 10           - вывести 10 строк (after) найденного id и любые символы после найденного символа
docker logs containerName | grep "id.*" -B 10           - вывести 10 строк (before) найденного id и любые символы перед найденного символа


-----------------------------------------------------------------------------
накатить dump в докер контейнере из windows:
1. Зайти bash в папке с dump
2. docker cp ./filedump.sql containername:/tmp/filedump.sql (# docker cp ./1.sql postgresql:/tmp/1.sql)
3. заходим в bash внутри докер контейнера
для linux:
docker exec -it containername bash (docker exec -it postgresql bash)
для windows:
зайти в docker через приложение, открыть консоль CLI всё мы внутри контейнера
ls
перейти в место с dump
su postgres
psql databasename < filedump.sql


полезные команды для накатывания
su postgres
psql
drop database
create database
create user username with password 'userpassword'
если в имени пользователя есть тире:
create user "covidinfo-dbadmin" with password 'MasterData!';

alter user username with superuser;

-----------------------------------------------------------------------------------------------
скачать образ и запустить docker container
docker run --name postgresql -p 5432:5432  -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -d postgres:10.19-alpine

сделать образ на основе существующего container
docker commit -m "this comment" current_container_name new_image_name

---------------------------------------------------------------------------------------------
выгрузить докер образы из image в tar архив:
docker save -o shop_images.tar shop_shop:latest confluentinc/cp-kafka:latest confluentinc/cp-zookeeper:latest postgres:12-alpine

загрузка в докер среду производится обратной операцией
docker load -i shop_images.tar