Вариантов всего четыре:

    OneToOne - один к одному
    OneToMany - один ко многим
    ManyToOne - многие к одному
    ManyToMany - многие ко многим

Каждое из выше перечисленных отношений может быть односторонним (unidirectional)
или двусторонним (bidirectional). Односторонние отношения это например писатель и написанные книги
когда в таблицу написанные книги помещается внешний ключ на писателя а в таблице писателя нет сведений о написанных кни-
гах. Тогда в сущности книги мы поместим поле
@ManyToOne
@JoinColumn(name = "author_id")
private Author author;

А в сущности Автор поля о написанных книгах не будет.

Однако такие отношения можно переделать в двусторонние. Для этого в сущность автор мы помещаем поле список книг. И спи-
сок наполняется отталкиваясь от таблицы книг по следующей логике: "Если данная книга ссылается на данного автора, значит
нужно поместить его в список"

@OneToMany(mappedBy = "author")
private List<Book> bookList;

Теперь сущность автора так же знает о написанных книгах
------------------------------------------------------------------------------------------------------------------------
Односторонним называется отношение, владельцем которого является только одна из двух сторон. Отсюда и название.
Следует заметить, что при этом вторая сторона об этом отношении ничего не знает. Hibernate будет считать владельцем
отношения ту сущность, в которой будет поставлена аннотация отношения.

Давайте попробуем сделать владельцем отношения сторону контакта. При этом сущности будут выглядеть следующим образом:

@Entity
@Table(name = "contacts")
public class Contact {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String type;

    @Column
    private String data;

    @ManyToOne
    private User user;

    // Конструктор по умолчанию, геттеры, сеттеры и т.д.
}

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String username;

    // Конструктор по умолчанию, гетеры, сеттеры и т.д.
}
Если запустить этот код, то Hibernate создаст следующую структуру таблиц, которая выглядит для нас вполне привычно.
Отношение между таблицами создается при помощи ссылочного поля user_id в таблице contacts.

create table contacts (
    id bigint not null auto_increment,
    data varchar(255),
    type varchar(255),
    user_id bigint,
    primary key (id)
) engine=InnoDB;

create table users (
    id bigint not null auto_increment,
    username varchar(128) not null,
    primary key (id)
) engine=InnoDB
========================================================================================================================

Но выбор сущности Contact в качестве стороны владельца отношений в данном случае не очень удачен.
Очевидно, что нам чаще нужна информация обо всех контактах пользователя чем о том, какому пользователю принадлежит
контакт. Попробуем сделать владельцем контакта сущность пользователя. Для этого убираем поле user из класса Contact и
добавляем поле со списком контактов в класс User. Получаем следующий код.

@Entity
@Table(name = "contacts")
public class Contact {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String type;

    @Column
    private String data;

    // Конструктор по умолчанию, геттеры, сеттеры и т.д.
}

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String username;

    @OneToMany
    private List<Contact> contacts;

    // Конструктор по умолчанию, гетеры, сеттеры и т.д.
}

Теперь владельцем отношения является сущность пользователя, что более логично, но если запустить данный код и
посмотреть на созданную Hibernate структуру таблиц, то мы столкнёмся с одной хорошо известной почти каждому
кто использовал эту библиотеку проблемой.

create table contacts (
    id bigint not null auto_increment,
    data varchar(255),
    type varchar(255),
    primary key (id)
) engine=InnoDB;

create table users (
    id bigint not null auto_increment,
    username varchar(128) not null,
    primary key (id)
) engine=InnoDB;

create table users_contacts (
    User_id bigint not null,
    contacts_id bigint not null
) engine=InnoDB;

Чтобы связать сущности Hibernate создал дополнительную таблицу связи (join table) с именем users_contacts,
хотя сущности вполне можно было бы связать через ссылочное поле в таблице contacts, как в предыдущем случае.
Проблему можно легко решить добавив аннотацию JoinColumn к полю contacts.

    @OneToMany
    @JoinColumn(name = "user_id")
    private List<Contact> contacts;

При таких настройках связь будет проводиться при помощи колонки user_id в таблице contacts, а таблица связи
создаваться не будет.
class Book

    @ManyToOne
    @JoinColumn(name = "author_id")
    private Author author

    @JoinColumn обозначает где же в таблице Book (текущий класс) есть ссылка на автора. @JoinColumn относится к той
    сущности у которой есть fk (внешний ключ), а он может быть только в одной из 2-х таблиц со стороны многих. Иначе
    не получится организовать таблицы. Другими словами если у пользователя может быть неопределенное количество контак
    тов (и изменяющееся) то на примере пользователя в таблице пользователя есть имя и первичный ключ
    а в таблице котактов котакт и первичный ключ пользователя

    и наоборот в таблице автора только имя автора и Id автора. А в таблице книги, инфа о книге и внешний ключ автора
    вот и нужно указать @JoinColumn название столбца той таблицы, где есть внешний ключ.
------------------------------------------------------------------------------------------------------------------------

Двусторонние отношения
У двусторонних отношений помимо стороны - владельца (owning side) имеется ещё и противоположная сторона (inverse side).
Т.е. обе стороны отношения обладают информацией о связи. Логично предположить, что из одностороннего отношения можно
сделать двустороннее просто добавив поле и аннотацию в класс сущности противоположной стороны, но не все так просто.
В чем именно тут проблема очень хорошо видно на примере отношения многие ко многим. Давайте создадим пример такого
отношения между сущностями пользователя и роли этого пользователя.

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String username;

    @ManyToMany
    private List<Role> roles;

    // Конструктор по умолчанию, гетеры, сеттеры и т.д.
}

    @Entity
    @Table(name = "roles")
    public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String name;

    @ManyToMany
    private List<User> users;

    // Конструктор по умолчанию, гетеры, сеттеры и т.д.
}

Запускаем код и смотрим на структуру таблиц. Помимо таблиц для пользователей и ролей Hibernate создаст две
таблицы связи, хотя нам хватило бы и одной.

create table roles_users (
    Role_id bigint not null,
    users_id bigint not null
) engine=InnoDB;

create table users_roles (
    User_id bigint not null,
    roles_id bigint not null
) engine=InnoDB;

Дело в том, что вместо одного двустороннего отношения мы с вами сейчас создали два односторонних. Тоже самое
произойдет и для отношения один ко многим. Чтобы Hibernate понял, что мы хотим создать именно двустороннее отношение
нам нужно указать, какая из сторон является владельцем отношений, а какая является обратной стороной.
Это делается при помощи атрибута mappedBy. Важно отметить, что указывается этот атрибут в аннотации, которая находится
на противоположной стороне отношения.

Для отношения многие ко многим любая из сторон может быть владельцем. В случае с ролями и пользователями выберем
сущность пользователя в качестве владельца. Для этого изменим описание поля users в классе Role следующим образом.

    // значение атрибута mappedBy - имя поля связи в классе сущности-владельца отношений
    @ManyToMany(mappedBy = "roles")
    private List<User> users;

Теперь Hibernate создаст только одну таблицу связи users_roles.


другой способ прописать связь @ManyToMany на примере многие читатели прочитали многие книги

    public class Reader{

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int id;

    @Column(name = "name")
    private String name;

    @ManyToMany
    @JoinTable(                                                    <- создать соединительную таблицу
        name = "books_readers",                                    <- назвать books_readers
        joinColumns = @JoinColumn(name = "reader_id"),             <- в каком столбце соединительной таблицы положить id своего класса
        inverseJoinColumns = @JoinColumn(name = "book_id")         <- в каком столбце соединительной таблицы положить id противоположного класса
        )
    private List<Book> books;

}
ПРИ ЭТОМ В КЛАССЕ КНИГИ ТОЖЕ САМОЕ
    public class Book{
    ---//---//---//---//---//---//
    @ManyToMany
    @JoinTable(
            name = "books_readers",
            joinColumns = @JoinColumn(name = "book_id"),
            inverseJoinColumns = @JoinColumn(name = "reader_id")
            private List<Reader> readers;
            )


    )

    }

------------------------------------------------------------------------------------------------------------------------
И напоследок давайте сделаем двусторонним отношение между пользователем и контактами. Следует отметить,
что в отношении один ко многим стороной-владельцем может быть только сторона многих (many),
поэтому атрибут mappedBy есть только в аннотации @OneToMany .
В нашем случае владельцем отношения будет сторона контакта (класс Contact).

@Entity
@Table(name = "contacts")
public class Contact {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String type;

    @Column
    private String data;

    @ManyToOne
    private User user;

    // Конструктор по умолчанию, геттеры, сеттеры и т.д.
}

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column
    private String username;

    @OneToMany(mappedBy = "user")    <- т.к. в таблице contact нет внешнего ключа тут прописано что в таблице котакты
    private List<Contact> contacts;          ищи ПОЛЕ которое ссылается на "меня" иначе Hibernate не поймет какую из
                                             сущностей внедрять в это поле (Там где есть ссылки на этого пользователя,
                                             те контакты и внедрятся в этот список).

    // Конструктор по умолчанию, гетеры, сеттеры и т.д.
}
Для такого кода Hibernate создаст привычную нам структуру из двух таблиц со ссылкой на пользователя в таблице контактов.




