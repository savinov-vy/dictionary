ISOLATION
Уровни изоляции:
hibernate.collection.isolation=1 read uncomited
hibernate.collection.isolation=2 read commited
hibernate.collection.isolation=4 repeatable
hibernate.collection.isolation=8 serializable
                    phantom read       non repeatable read     dirty read      lost update
SERIALIZABLE            +                       +                   +               +
REPEATABLE READ         -                       +                   +               +
READ COMMITED           -                       -                   +               +
READ UNCOMMITED         -                       -                   -               +


READ UNCOMMITED
ЧТЕНИЕ ДАННЫХ ИЗ НЕЗАКОММИЧЕННОЙ ТРАНЦЗАЦИИ:
Т.Е. 1 ТРАНЗАКЦИЯ ИЗМЕНЯЕТ ДАННЫЕ ВТОРАЯ ЧИТАЕТ НЕ ЗАКОММИЧЕННЫЕ ДАННЫЕ

READ COMMITED
ВТОРАЯ ТРАНЗАКЦИЯ ЧИТАЕТ ТО ЧТО ЗАКОММИЧЕНО И ЕСЛИ ДАННЫЕ ИЗМЕННЕНЫ НО НЕ ЗАКОМИЧЕНЫ ТО ТРАНЗАКЦИЯ
ЧИТАЕТ ЧТО БЫЛО ДО ИЗМЕНЕНИЙ. После коммита читает уже обновленные данные

REPEATABLE READ
ПЕРВАЯ ТРАНЗАКЦИЯ ЕСЛИ НАЧАЛА ЧИТАТЬ ДАННЫЕ ТО НЕ ЗАВИСИМО ЗАКОММИТЕЛА ВТОРАЯ ТРАНЗАКЦИЯ ДАННЫЕ ИЛИ НЕТ
ОНА БУДЕТ ЧИТАТЬ ТЕ ДАННЫЕ КОТОРЫЕ БЫЛИ ПЕРЕД НАЧАЛОМ СВОЕЙ ТРАНЗАКЦИИ
ЕСЛИ ПОПРОБОВАТЬ ОБНОВИТЬ ДАННЫЕ КОТОРЫЕ УЖЕ ИЗМЕНИЛА ДРУГАЯ ТРАНЗАКЦИЯ ТО БУДЕТ ОШИБКА - ДАННЫЕ ИЗМЕНИЛИСЬ

SERIALISIBLE
Поочередное добавление и чтение данных


LOST UPDATE (в современных BD не воспроизвести)
Происходит, когда обе транзакции одновременно обновляют данные и затем вторая транзакция откатывает изменения,
вследствие чего изменения обеих транзакций теряются.

изначально существует число 8
сначала одна транзакция начинает менять 8 на 10
потом подключается вторая транзакция и начинает менять 8 на 15
вторая транзакция заканчивается rollback-ом и откатывает 15 назад на 8
обновление 10 потеряно!!! read uncomited

                                Tx A
 8   |------------------------------------------------------------>|COMMIT
            |
            |                           15
            V                           ^
            10                          |
                                        |
 8   |------------------------------------------------------------>|ROLLBACK


 READ UNCOMMITED -----------> DIRTY READ
происходит, когда вторая транзакция читает изменения, сделанные другой транзакцией, но эти изменения ещё не были
закомичены. После чего первая транзакция откатывает эти изменения, а первая продолжает работу с "грязными данными"
                                 Tx A
  8   |------------------------------------------------------------>|Rollback
             | UPDATE
             |                           10
             V                           ^
             10                          |
                                         | READ FOR UPDATE
  8   |------------------------------------------------------------>|Commit

  вторая транзакция должна была видеть те данные которые были до открытия транзакции, но она видит
  данные которые обновила, но не закомитила другая транзакция и в результате работает с грязными данными

  NON REPEATABLE READ
  1. Происходит, когда первая транзакция читает одни и те же данные дважды, но после первого прочтения вторая транзакция
  изменяет (update) эти же данные и делает коммит, в следствие чего вторая выборка вернёт другой результат

    5   |------------------------------------------------------------>|Rollback
               | select                             |
               |                 10                 |
               V                 ^                  V
               5                 |                  10
                                 | UPDATE
                        5   |--------->|Commit

    2. LAST COMMIT WINS две транзакции изменяют данные, но вторая транзакция изменяет их позже
    в результате изменения сделанные первой транзакцией - теряются

    8   |------------------------------------------------------------>|Rollback
                   | SELECT                        | UPDATE
                   |            8                  |             15
                   V            ^                  V             ^
                   8            |                  10            |
                                | SELECT                         |
    8   |------------------------------------------------------------>|Commit
    В ИТОГЕ РЕЗУЛЬТАТ ТРАНЗАКЦИИ 1 (ЧИСЛО 10) БУДЕТ УТЕРЯНО
    ИЛИ ДВА КЛИЕНТА РЕЗЕРВИРУЮТ МЕСТО В ГОСТИННИЦЕ ОДИН РЕЗЕРВИРУЕТ И ПРОИСХОДИТ КОММИТ
    И ВТОРОЙ ТАК ЖЕ РЕЗЕРВИРУЕТ И ПРОИСХОДИТ КОММИТ
    ПО ЛОГИКЕ МЕСТО ДОЛЖНО ЗАФИКСИРОВАТЬСЯ ЗА КЛИЕНТОМ 1, НО ОНО ЗАФИКСИРУЕТСЯ ЗА КЛИЕНТОМ 2

    Phantom Read
    первая транзакция читает данные дважды, но вторая транзакция после первого прочтения
    добавляет или удаляет строки и делает коммит, в следствие чего вторая выборка в первой транзакции вернёт другой
    результат (разное количество записей)

    5   |------------------------------------------------------------>|Rollback
               | select                             |
               |                 10                 |
               V                 ^                  V
               5                 |                  10
                                 | INSERT/DELETE
                        5   |--------->|Commit