Основным интерфейсом в Hibernate является Session. Итерфейст Session отвечает за связь между Hibernate и java
приложением. С помощью этого интерфейса происходят все crud операции в приложении. Объект интерфейса Session получают
из SessionFactory, которая настраивается в приложении и существует в виде singleton.

SessionFactory необходимо настроить. Для настройки SessionFactory придется создать несколько бинов, которые
будут сохранять в себе настройки подключения к базе данных и т.д.

настройки подключения к базе данных. Для того чтобы код в проекте после доработке уже не трогать существует
класс Environment  и файл .properties. Если нужно будет развернуть систему на продакшене или для тестирования
значения настроек изменятся только в .properties а в самом приложении код останется таким как был.
-----------------------------------------------------------------------------------------------------------------------
пример db.properties из проекта: Hibernate_connect_config
db.properties

## jdbc
# наименование драйвера
jdbc.driverClassName=org.postgresql.Driver

# порт который использует субд и наименование базы данных
# при выпуске в продакшн или если база данныз будет развернута не на локалхост
# этот адрес придется изменить
jdbc.url=jdbc:postgresql://localhost:5432/hibernate

# имя пользователя
jdbc.user=postgres

# пароль пользователя
jdbc.pass=root

## hibernate
# диалект который придется использовать hibernate для составления
# sql запросов, чтобы передавать java объекты в базу данных
hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect

# это чтобы можно было видеть sql запросы при исользовании hibernate для сохранения или получения
сущности
hibernate.show_sql=true

# разрешение создавать hibernate таблцы в соответствие с сущеностями,
# но запрещено использовать такую настройку на проде (можно рассмотреть validate)
hibernate.hbm2ddl.auto=create

# подгрузка дополнительных метаданных запрещена
hibernate.temp.use_jdbc_metadata_defaults=false



-----------------------------------------------------------------------------------------------------------------------
пример класса HibernateConfiguration из проекта Hibernate_connect_config


в конфигурационном файле необходимо настроить
@Configuration <- обозначение что файл является конфигурационным
@EnableTransactionManagement  <- включить управление транзакциями
@PropertySource("classpath:db.properties") <- обозначить где находятся property для конфигурации
public class HibernateConfiguration {
    @Autowired
    private Environment environment;

создание бинов и использования Environmen см. в проекте Hibernate_connect_config

}

